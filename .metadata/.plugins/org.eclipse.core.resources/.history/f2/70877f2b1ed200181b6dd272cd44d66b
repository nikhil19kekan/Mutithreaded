import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
/*
 * This class serves the client
 */
public class ServerService extends Server implements Runnable{
	private Socket client=null;
	private String clientBeingServed=null;
	private DataOutputStream dout=null;
	private DataInputStream din=null;
	/*
	 * This is construcor that takes client sockte that already has been connected to server and client name.
	 * It initializes and input and output streams for serving the respective client
	 */
	public ServerService(Socket client,String name) throws IOException {
		this.client=client;
		this.clientBeingServed=name;
		dout=new DataOutputStream(client.getOutputStream());
		din=new DataInputStream(client.getInputStream());
	}
	/*
	 * takes out actual message sent by client from its http format
	 */
	public String getMessage(String str){
		System.out.println("returning\n"+str.substring(str.indexOf("message:")+8, str.length()));
		return str.substring(str.indexOf("message:")+8, str.length());
	}
	/*
	 * This method execute when thread for this class is executed from Server.java file after connection is accepted
	 */
	@Override
	public void run() {
		int waitTime=0;
		try{
			while(client.isConnected()){
					String msg=din.readUTF();
					ServerWindow.write(msg);
					waitTime=Integer.parseInt(getMessage(msg));
					Thread.sleep(waitTime*1000);
					ServerWindow.write("Served client:"+clientBeingServed);
					dout.writeUTF("Server waited "+waitTime+" seconds for "+clientBeingServed);
					dout.flush();
			}
			client.close();
		}catch(Exception e){
			System.err.println("ServerService:error serving client"+clientBeingServed+e.getMessage());
		}
	}
}